generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                      String                    @id @default(cuid())
  name                    String?
  email                   String?                   @unique
  emailVerified           DateTime?
  image                   String?
  accounts                Account[]
  sessions                Session[]
  StructuredSyndicateUser StructuredSyndicateUser[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model StructuredSyndicate {
  id                      String                    @id @default(cuid())
  registeredName          String
  registrationNumber      String
  syndicateHeadName       String
  bankVerificationNumber  String
  operationalAddress      String
  state                   String
  utilityBillUrl          String
  StructuredSyndicateUser StructuredSyndicateUser[]
}

model PendingDeal {
  id             String @id @default(cuid())
  syndicateId    String
  name           String
  fundAmount     Int
  expectedReturn Int
  expectedTenure Int
}

model OpenDeal {
  id               String   @id @default(cuid())
  syndicateId      String
  name             String
  fundAmount       Int
  expectedReturn   Int
  expectedTenure   Int
  approvedDateTime DateTime
  approvedByUserId String
}

model StructuredSyndicateUser {
  id                    String              @id
  structuredSyndicateId String
  userId                String
  StructuredSyndicate   StructuredSyndicate @relation(fields: [structuredSyndicateId], references: [id], onDelete: Cascade)
  User                  User                @relation(fields: [userId], references: [id], onDelete: Cascade)
}
