generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String         @id @default(cuid())
  name          String?
  email         String?        @unique
  password      String         @default("")
  emailVerified DateTime?
  image         String?
  entityId      String?
  accounts      Account[]
  sessions      Session[]
  entity        Entity?        @relation(fields: [entityId], references: [id])
  memberInvites MemberInvite[]
  Notification  Notification[]
  Wallet        Wallet?
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model MerchantInvite {
  id       String @id @default(cuid())
  userType Int
}

model MemberInvite {
  id             String        @id @default(cuid())
  userType       Int
  merchantId     String
  userId         String?
  emailAddress   String?
  notificationId String?
  merchant       Merchant      @relation(fields: [merchantId], references: [id])
  user           User?         @relation(fields: [userId], references: [id])
  notification   Notification? @relation(fields: [notificationId], references: [id])
}

model Notification {
  id            String         @id @default(cuid())
  action        Int
  userId        String
  user          User           @relation(fields: [userId], references: [id])
  memberInvites MemberInvite[]
}

model Entity {
  id          String        @id @default(cuid())
  type        Int
  merchants   Merchant[]
  Institution Institution[]
  individuals Individual[]
  User        User[]
}

model Merchant {
  id                      String         @id @default(cuid())
  entityId                String
  registeredName          String
  registeredCompanyNumber String
  bankVerificationNumber  Int
  operationalAddressId    String
  utilityBillId           String
  entity                  Entity         @relation(fields: [entityId], references: [id])
  operationAddress        Address        @relation(fields: [operationalAddressId], references: [id])
  utilityBill             Document       @relation(fields: [utilityBillId], references: [id])
  memberInvites           MemberInvite[]
}

model Institution {
  id                      String   @id @default(cuid())
  entityId                String
  registeredName          String
  registeredCompanyNumber String
  headName                String
  headEmail               String
  bankVerificationNumber  Int
  operationalAddressId    String
  utilityBillId           String
  entity                  Entity   @relation(fields: [entityId], references: [id])
  operationAddress        Address  @relation(fields: [operationalAddressId], references: [id])
  utilityBill             Document @relation(fields: [utilityBillId], references: [id])
}

model Individual {
  id                     String   @id @default(cuid())
  entityId               String
  name                   String
  bankVerificationNumber Int
  operationalAddressId   String
  utilityBillId          String
  entity                 Entity   @relation(fields: [entityId], references: [id])
  operationAddress       Address  @relation(fields: [operationalAddressId], references: [id])
  utilityBill            Document @relation(fields: [utilityBillId], references: [id])
}

model Address {
  id          String        @id @default(cuid())
  street      String
  houseNumber String
  zipCode     String
  city        String
  state       String
  Merchant    Merchant[]
  Institution Institution[]
  Individual  Individual[]
}

model Document {
  id          String        @id @default(cuid())
  name        String
  contentType String
  sizeInMb    Int
  publicUrl   String
  Merchant    Merchant[]
  Institution Institution[]
  Individual  Individual[]
}

model Deal {
  id                 String   @id @default(cuid())
  merchantId         String
  name               String
  approvalStatus     Int // pending, active, declined
  description        String
  orderNumber        String
  orderValueInCents  Int
  orderValueCurrency String
  startDate          DateTime
  endDate            DateTime
  requestedAmount    Int
  returnOnInvestment Int
  managementFee      Int
  paymentTerms       Int // Letter of Credit, Invoice factoring, discounting, Cash against the document
}

model VirtualAccount {
  id               String   @id @default(cuid())
  virtualAccountId String
  accountNumber    String
  accountName      String
  bankName         String
  reference        String
  balance          Balance?
}

model Wallet {
  id          String    @id @default(cuid())
  userId      String    @unique
  user        User      @relation(fields: [userId], references: [id])
  balanceList Balance[]
}

model Balance {
  id               String              @id @default(cuid())
  walletId         String
  virtualAccountId String              @unique
  currency         String
  valueInCents     Int
  wallet           Wallet              @relation(fields: [walletId], references: [id])
  virtualAccount   VirtualAccount      @relation(fields: [virtualAccountId], references: [id])
  transactions     WalletTransaction[]
}

model WalletTransaction {
  id                  String   @id @default(cuid())
  balanceId           String
  date                DateTime
  description         String
  reference           String
  transactionType     Int
  status              Int
  value               Int
  initialValueInCents Int
  newValueInCents     Int
  balance             Balance  @relation(fields: [balanceId], references: [id])
}

model Beneficiary {
  id                String @id @default(cuid())
  fincraId          String
  firstName         String
  lastName          String
  accountHolderName String
  currency          String
}
