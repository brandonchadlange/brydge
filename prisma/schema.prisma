generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                        String                      @id @default(cuid())
  legalName                 String
  email                     String?                     @unique
  emailVerified             DateTime?
  rcNumber                  String       
  image                     String?
  accounts                  Account[]
  BusinessUser              BusinessUser[]
  sessions                  Session[]
  StructuredSyndicateUser   StructuredSyndicateUser[]
  UnstructuredSyndicateUser UnstructuredSyndicateUser[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Business {
  id    String         @id @default(cuid())
  users BusinessUser[]
}

model BusinessUser {
  id         String   @id @default(cuid())
  businessId String
  userId     String
  business   Business @relation(fields: [businessId], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model StructuredSyndicate {
  id                     String                    @id @default(cuid())
  registeredName         String
  registrationNumber     String
  syndicateHeadName      String
  bankVerificationNumber String
  operationalAddress     String
  state                  String
  utilityBillUrl         String
  users                  StructuredSyndicateUser[]
}

model StructuredSyndicateUser {
  id                    String              @id @default(cuid())
  structuredSyndicateId String
  userId                String
  structuredSyndicate   StructuredSyndicate @relation(fields: [structuredSyndicateId], references: [id], onDelete: Cascade)
  user                  User                @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model UnstructuredSyndicate {
  id                     String                      @id @default(cuid())
  utilityBillUrl         String
  name                   String
  bankVerificationNumber Int
  users                  UnstructuredSyndicateUser[]
}

model UnstructuredSyndicateUser {
  id                      String                @id @default(cuid())
  unstructuredSyndicateId String
  userId                  String
  unstructuredSyndicate   UnstructuredSyndicate @relation(fields: [unstructuredSyndicateId], references: [id], onDelete: Cascade)
  user                    User                  @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model PendingDeal {
  id             String @id @default(cuid())
  syndicateId    String
  name           String
  fundAmount     Int
  expectedReturn Int
  expectedTenure Int
}

model OpenDeal {
  id               String   @id @default(cuid())
  syndicateId      String
  name             String
  fundAmount       Int
  expectedReturn   Int
  expectedTenure   Int
  approvedDateTime DateTime
  approvedByUserId String
}
